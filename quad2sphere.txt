// For every vertex in the mesh
// Where vertices form 6 grids making a cube
// With bounds of [-1, -1, -1] to [1, 1, 1]
void MapCubeToSphere( Vector3& vPosition )
{
    float x2 = vPosition.x * vPosition.x;
    float y2 = vPosition.y * vPosition.y;
    float z2 = vPosition.z * vPosition.z;

    vPosition.x = vPosition.x * sqrt( 1.0f - ( y2 * 0.5f ) - ( z2 * 0.5f ) + ( (y2 * z2) / 3.0f ) );
    vPosition.y = vPosition.y * sqrt( 1.0f - ( z2 * 0.5f ) - ( x2 * 0.5f ) + ( (z2 * x2) / 3.0f ) );
    vPosition.z = vPosition.z * sqrt( 1.0f - ( x2 * 0.5f ) - ( y2 * 0.5f ) + ( (x2 * y2) / 3.0f ) );
}



// Declared Variables
// width         - number of vertices across the x axis
// height        - number of vertices across the y axis
// radius        - sphere's radius
// pVertexBuffer - vertex buffer array

// Grid facing negative z
Vector3 vMinPosition( -1.0f, -1.0f, -1.0f );

for ( int y = 0; y < height; ++y )
{
    for ( int x = 0; x < width; ++x )
    {
        Vector3 vPosition = vMinPosition;
        vPosition.x += (float)x / (float)(width-1) * 2.0f; // Multiply by 2.0f to map position from -1 to +1
        vPosition.y +- (float)y / (float)(height-1) * 2.0f; // Multiply by 2.0f to map position from -1 to +1

        // Map the grid position into a sphere position
        MapCubeToSphere( vPosition );

        // The normal is just the vector from the center of the sphere.
        Vector3 vNormal = vPosition.Normal();

        // Extrude the sphere by the radius
        vPosition *= radius;

        // Assign to vertex buffer
        pVertexBuffer[ y * width + x ].Position = vPosition;
        pVertexBuffer[ y * width + x ].Normal = vNormal;
    }
}


<?php

function QuadKey2TileCoordinates($quadkey) {

  $x=0;
  $y=0;

  for ($i=0; $i<strlen($quadkey); $i++) {
    $x = $x*2;
    $y = $y*2;
    switch (substr($quadkey, $i, 1)) {
      case 0:
        break;
      case 1:
        $x++;
        break;
      case 2:
        $y++;
        break;
      case 3:
        $x++;
        $y++;
        break;
    }
  }

  return array($x,$y);

}


$filename=$argv[1];
$quadkey=substr($filename, 0, strpos($filename,"."));

$pos=QuadKey2TileCoordinates($quadkey);

symlink ("../{$filename}", "links/{$pos[0]}_{$pos[1]}.png");

?>

$e1 = array  ( $plane[2][0] - $plane[1][0], // Position3 e1 = plane[1] - plane[0];
               $plane[2][1] - $plane[1][1],
               $plane[2][2] - $plane[1][2]);

$e2 = array  ( $plane[3][0] - $plane[0][0], // Position3 e2 = plane[2] - plane[3];
               $plane[3][1] - $plane[0][1],
               $plane[3][2] - $plane[0][2]);

$e3 = array  ( $plane[0][0] - $plane[1][0], // Position3 e3 = plane[3] - plane[0];
               $plane[0][1] - $plane[1][1],
               $plane[0][2] - $plane[1][2]);

$e4 = array  ( $plane[3][0] - $plane[2][0], // Position3 e4 = plane[2] - plane[1];
               $plane[3][0] - $plane[2][1],
               $plane[3][0] - $plane[2][2]);


$p1 = array ($e1[0]*0.5+$plane[1][0], //  Position3 p1 = e1 * 0.5f + plane[0];
             $e1[1]*0.5+$plane[1][1],
             $e1[2]*0.5+$plane[1][2]);

$p2 = array ($e2[0]*0.5+$plane[0][0], //  Position3 p2 = e2 * 0.5f + plane[3];
             $e2[1]*0.5+$plane[0][1],
             $e1[2]*0.5+$plane[0][2]);

$p3 = array ($e3[0]*0.5+$plane[1][0], //  Position3 p3 = e3 * 0.5f + plane[0];
             $e3[1]*0.5+$plane[1][1],
             $e3[2]*0.5+$plane[1][2]);

$p4 = array ($e4[0]*0.5+$plane[2][0], //  Position3 p4 = e4 * 0.5f + plane[1];
             $e4[1]*0.5+$plane[2][1],
             $e4[2]*0.5+$plane[2][2]);

$e5 = array ($p2[0] - $p1[0], // Position3 e5 = p2 - p1;
             $p2[1] - $p1[1],
             $p2[2] - $p1[2]);

$p5 = array ($e5[0] * 0.5 + $p1[0], // Position3 p5 = e5 * 0.5f + p1;
             $e5[1] * 0.5 + $p1[1],
             $e5[2] * 0.5 + $p1[2]);
